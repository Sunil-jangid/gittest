
{
    "requiredFields": ["column1", "column2", "column3"]
}

package com.example.excelprocessor.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class ExcelData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String column1;
    private String column2;
    private String column3;
}


package com.example.excelprocessor.repository;

import com.example.excelprocessor.model.ExcelData;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ExcelDataRepository extends JpaRepository<ExcelData, Long> {
}


package com.example.excelprocessor.service;

import com.example.excelprocessor.model.ExcelData;
import com.example.excelprocessor.repository.ExcelDataRepository;
import org.apache.poi.ss.usermodel.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.ResourceUtils;

import java.io.File;
import java.io.FileInputStream;
import java.util.*;

@Service
public class ExcelProcessorService {

    private final ExcelDataRepository repository;

    @Value("${config.file.path}")
    private String configFilePath;

    public ExcelProcessorService(ExcelDataRepository repository) {
        this.repository = repository;
    }

    public void processExcelFile(String excelFilePath) throws Exception {
        // Load configuration
        File configFile = ResourceUtils.getFile(configFilePath);
        List<String> requiredFields = loadConfiguration(configFile);

        // Read Excel file
        FileInputStream fileInputStream = new FileInputStream(excelFilePath);
        Workbook workbook = WorkbookFactory.create(fileInputStream);
        Sheet sheet = workbook.getSheetAt(0);

        // Get header row
        Row headerRow = sheet.getRow(0);
        Map<String, Integer> columnIndexMap = getColumnIndexMap(headerRow, requiredFields);

        // Process rows
        List<ExcelData> dataList = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);

            ExcelData data = new ExcelData();
            if (columnIndexMap.containsKey("column1")) {
                data.setColumn1(getCellValue(row.getCell(columnIndexMap.get("column1"))));
            }
            if (columnIndexMap.containsKey("column2")) {
                data.setColumn2(getCellValue(row.getCell(columnIndexMap.get("column2"))));
            }
            if (columnIndexMap.containsKey("column3")) {
                data.setColumn3(getCellValue(row.getCell(columnIndexMap.get("column3"))));
            }
            dataList.add(data);
        }

        // Save to database
        repository.saveAll(dataList);
        workbook.close();
        fileInputStream.close();
    }

    private List<String> loadConfiguration(File configFile) throws Exception {
        // Use Jackson or Gson to parse the JSON file
        ObjectMapper objectMapper = new ObjectMapper();
        Map<String, Object> config = objectMapper.readValue(configFile, Map.class);
        return (List<String>) config.get("requiredFields");
    }

    private Map<String, Integer> getColumnIndexMap(Row headerRow, List<String> requiredFields) {
        Map<String, Integer> columnIndexMap = new HashMap<>();
        for (Cell cell : headerRow) {
            String columnName = cell.getStringCellValue();
            if (requiredFields.contains(columnName)) {
                columnIndexMap.put(columnName, cell.getColumnIndex());
            }
        }
        return columnIndexMap;
    }

    private String getCellValue(Cell cell) {
        if (cell == null) return null;

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            default:
                return null;
        }
    }
      }
package com.example.excelprocessor.controller;

import com.example.excelprocessor.service.ExcelProcessorService;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/excel")
public class ExcelProcessorController {

    private final ExcelProcessorService service;

    public ExcelProcessorController(ExcelProcessorService service) {
        this.service = service;
    }

    @PostMapping("/process")
    public String processExcelFile(@RequestParam("file") MultipartFile file) {
        try {
            // Save the file locally
            String filePath = "uploads/" + file.getOriginalFilename();
            file.transferTo(new File(filePath));

            // Process the file
            service.processExcelFile(filePath);
            return "File processed successfully!";
        } catch (Exception e) {
            e.printStackTrace();
            return "Failed to process file: " + e.getMessage();
        }
    }
    }

  # Configuration file location
config.file.path=classpath:config.json

# Database configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/your_database
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
                  
/*cvxvx
